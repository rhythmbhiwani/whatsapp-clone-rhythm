{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","Reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubcsribe","photoURL","IconButton","DonutLarge","Chat","signOut","MoreVert","SearchOutlined","placeholder","type","room","key","input","setInput","setRoomName","nameColor","setNameColor","roomId","useParams","colorsCollection","Math","floor","random","length","Date","timestamp","toDate","toUTCString","toString","email","style","color","date","hours","getHours","minutes","getMinutes","ampm","formatAMPM","InsertEmoticon","AttachFile","rows","onChange","e","target","preventDefault","trim","displayName","FieldValue","serverTimestamp","Mic","actionTypes","state","action","console","log","Login","dispatch","onAuthStateChanged","userAuth","alt","Button","signInWithPopup","then","result","catch","error","alert","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72368a40.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAu0fGlvLP7qhpWHC5rpuytR_2fRliiVPA\",\r\n  authDomain: \"whatsapp-clone-rhythm.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-clone-rhythm.firebaseio.com\",\r\n  projectId: \"whatsapp-clone-rhythm\",\r\n  storageBucket: \"whatsapp-clone-rhythm.appspot.com\",\r\n  messagingSenderId: \"1070517561603\",\r\n  appId: \"1:1070517561603:web:4a3deeb8556d2dd5952136\",\r\n  measurementId: \"G-E9DT699RVT\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport db from './firebase';\r\nimport './SidebarChat.css';\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n    const [seed, setSeed] = useState('');\r\n    const [messages, setMessages] = useState('');\r\n\r\n    useEffect(() => {\r\n        setSeed(id);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\r\n                setMessages(snapshot.docs.map(doc => doc.data()));\r\n            });\r\n        }\r\n    }, [id]);\r\n\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat\");\r\n        if (roomName) {\r\n            db.collection('rooms').add({\r\n                name: roomName,\r\n            });\r\n        }\r\n    };\r\n\r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                <div className=\"sidebarChat__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    ) : (\r\n            <div onClick={createChat} className=\"sidebarChat\">\r\n                <h2>Add new Chat</h2>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default SidebarChat;\r\n\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useState, useEffect } from 'react';\r\nimport './Sidebar.css';\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport { Chat, DonutLarge, MoreVert, SearchOutlined } from '@material-ui/icons';\r\nimport SidebarChat from './SidebarChat';\r\nimport db, { auth } from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Sidebar() {\r\n    const [rooms, setRooms] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubcsribe = db.collection('rooms').onSnapshot(snapshot => {\r\n            setRooms(snapshot.docs.map(doc =>\r\n                ({\r\n                    id: doc.id,\r\n                    data: doc.data(),\r\n                })\r\n            ))\r\n        });\r\n\r\n        return () => {\r\n            unsubcsribe();\r\n        }\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar src={user?.photoURL} />\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <DonutLarge />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <Chat />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => auth.signOut()}>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlined />\r\n                    <input placeholder=\"Search or start a new chat\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat />\r\n                {rooms.map(room => (\r\n                    <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n                )\r\n\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n","import { Avatar, IconButton } from '@material-ui/core';\r\nimport { AttachFile, InsertEmoticon, Mic, MoreVert, SearchOutlined } from '@material-ui/icons';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './Chat.css';\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const [seed, setSeed] = useState('');\r\n    const [input, setInput] = useState('');\r\n    const [roomName, setRoomName] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [nameColor, setNameColor] = useState('');\r\n    const [{ user }, dispatch] = useStateValue();\r\n    const { roomId } = useParams();\r\n    const colorsCollection = [\"#1b262c\", \"#c02739\", \"#30475e\", \"#0f3460\", \"#e43f5a\", \"#202060\", \"#ed6363\", \"#a0204c\", \"#a64942\", \"#ed8d8d\"];\r\n\r\n    const formatAMPM = (date) => {\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        const ampm = hours >= 12 ? 'PM' : 'AM';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? '0' + minutes : minutes;\r\n        const strTime = hours + ':' + minutes + ' ' + ampm;\r\n        return strTime;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setNameColor(colorsCollection[Math.floor(Math.random() * colorsCollection.length)]);\r\n        if (roomId) {\r\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => {\r\n                setRoomName(snapshot.data()?.name);\r\n                db.collection('rooms').doc(roomId).collection('messages').orderBy('timestamp', 'asc').onSnapshot(snapshot => {\r\n                    setMessages(snapshot.docs.map(doc => doc.data()));\r\n                });\r\n            });\r\n        }\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        setSeed(roomId);\r\n    }, [roomId]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n            if (input.trim() != \"\") {\r\n                db.collection('rooms').doc(roomId).collection('messages').add({\r\n                    name: user.displayName,\r\n                    email: user.email,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    message: input,\r\n                });\r\n            }\r\n            setInput('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    {messages.length > 0 && <p>Last seen at {new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}</p>}\r\n                </div>\r\n\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlined />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat__body\">\r\n                {messages.map(message => (\r\n                    <p key={message.timestamp?.toString() + message.name} className={`chat__message ${message.email == user.email && 'chat__reciever'}`}>\r\n                        <span style={{ color: nameColor }} className=\"chat__name\">{message.name}</span>\r\n                        <span className=\"chat__mainMessage\">{message.message}</span>\r\n                        <span className=\"chat__timestamp\">{formatAMPM(new Date(message.timestamp?.toDate()))}</span>\r\n                    </p>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__footer\">\r\n                <IconButton>\r\n                    <InsertEmoticon />\r\n                </IconButton>\r\n                <IconButton>\r\n                    <AttachFile />\r\n                </IconButton>\r\n                <form>\r\n                    <input  rows=\"1\" value={input} onChange={(e) => setInput(e.target.value)} type=\"text\" placeholder=\"Type a message\" />\r\n                    <button onClick={sendMessage} type=\"submit\">Submit</button>\r\n                </form>\r\n                <IconButton>\r\n                    <Mic />\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n\r\n\r\n","export const initialState = {\r\n    user: null,\r\n}\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import { Button } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { auth, provider } from './firebase';\r\nimport './Login.css';\r\nimport { actionTypes } from './Reducer';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Login() {\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n            .then(result => dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: result.user,\r\n            }))\r\n            .catch(error => alert(error.message));\r\n    };\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(userAuth => {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: userAuth,\r\n            });\r\n        });\r\n    }, [user]);\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\" alt=\"WhatsApp Logo\" />\r\n                <div className=\"login__text\">\r\n                    <h1>Sign in to WhatsApp</h1>\r\n                </div>\r\n\r\n                <Button onClick={signIn}>Sign In With Google</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n          <div className=\"app__body\">\n            <Router basename=\"/\">\n              <Sidebar />\n              <Switch>\n                <Route path=\"/rooms/:roomId\">\n                  <Chat />\n                </Route>\n                <Route path=\"/\" />\n              </Switch>\n            </Router>\n          </div>)}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from './Reducer';\nimport { StateProvider } from './StateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}